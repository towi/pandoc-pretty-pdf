#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-
# based on https://github.com/jeroenjanssens/tikz2pdf

import os
import re
import sys
import shutil
import logging
import argparse
import subprocess
from collections import defaultdict

from time import sleep
from tempfile import mkdtemp

USE_TIKZLIBRARY_DEFAULT = [
    "backgrounds",
    "decorations.pathreplacing",
    "positioning",
    "shapes",
    "shapes.multipart",
    "trees",
    "chains",
    "matrix",
]

FONT_TO_PATHS = {}

class TikZ2PDF(object):

    def __init__(self, tikz_file, pdf_filename, **command_line_arguments):

        self.log = logging.getLogger('tikz2pdf')
        self.log.setLevel(logging.INFO)
        if command_line_arguments['debug']:
            self.log.setLevel(logging.DEBUG)

        self.environ = os.environ.copy()
        self.existing_texinputs = self.environ.get('TEXINPUTS', '')

        # Regular expression used to extract parameters from files
        self.argument_pattern = re.compile(b"^ *% *tikz2pdf-([^=$ ]*) *=? *(.*)")

        self.tikz_file = tikz_file
        self.pdf_filename = pdf_filename
        self.tikz_filename = os.path.abspath(tikz_file.name)
        self.tikz_dir = os.path.abspath(os.path.dirname(tikz_file.name))
        self.work_dir = mkdtemp(prefix='tikz2pdf-')
        self.template_dir = None
        self.tex_filename = os.path.join(self.work_dir, 'final.tex')
        self.log.info("Processing TikZ file: %s", self.tikz_filename)

        if command_line_arguments['edit']:
            self.open_tikz_editor()
        self.process(**command_line_arguments)
        if command_line_arguments['view']:
            self.open_pdf_viewer()
        if self.arguments['watch']:
            self.previous_mtimes = self.get_mtimes()
            try:
                while True:
                    self.wait_for_changes()
                    self.process(**command_line_arguments)
            except KeyboardInterrupt:
                pass

        # Delete temporary directory
        shutil.rmtree(self.work_dir)

        # Close files
        self.tikz_file.close()
        try:
            self.arguments['template'].close()
        except KeyError:
            pass


    def wait_for_changes(self):
        self.log.info("Waiting for changes...")
        while True:
            current_mtimes = self.get_mtimes()
            if set(current_mtimes.items()) - set(self.previous_mtimes.items()):
                self.previous_mtimes = current_mtimes
                break
            sleep(0.1)


    def get_mtimes(self):
        files = [self.tikz_filename]
        if self.arguments.get('template', None):
            files.append(os.path.abspath(self.arguments['template'].name))
        mtimes = {f: os.path.getmtime(f) for f in files}
        return mtimes


    def process(self, **command_line_arguments):
        self.arguments = self.get_arguments(**command_line_arguments)
        for k,v in self.arguments.items():
            self.log.debug("Parameter '%s' is set to '%s'", k, v)

        # Load tikz
        tikz_tex: bytes = self.get_tikz()
        if rb'\documentclass' in tikz_tex:
            final_tex: bytes = tikz_tex
        else:
            # Load template
            template_tex: bytes = self.get_template()
            # Combine template and tikzfile
            final_tex: bytes = template_tex.replace(b'%tikz2pdf+tikz', tikz_tex)
            # - handle usepackages
            _ps = [b"tikz"] + [ p.encode() for p in self.arguments.get('use_package', []) ]
            _up  = b"\n".join([mk_usepackage(p) for p in _ps])
            final_tex = final_tex.replace(b'%tikz2pdf+usepackages', _up)
            # - handle usetikzlibraries
            _ps = [] + [ p.encode() for p in self.arguments.get('use_tikzlibrary', USE_TIKZLIBRARY_DEFAULT) ]
            _up  = b"\n".join([mk_usetikzlibrary(p) for p in _ps])
            final_tex = final_tex.replace(b'%tikz2pdf+usetikzlibraries', _up)
            # - handle font
            if self.arguments.get('font', None):
                f = mk_font(self.arguments['font'].encode(), FONT_TO_PATHS)
                final_tex = final_tex.replace(b'%tikz2pdf+fonts', f)
        # Write final tex file
        with open(self.tex_filename, mode='wb') as f:
            f.write(final_tex)
        self.set_texinputs()
        if command_line_arguments['dry_run']:
            print("### dry run ###", file=sys.stderr)
            print(final_tex.decode(), file=sys.stderr)
            return
        self.compile()


    def set_texinputs(self):
        """Add the directories of the tikz file and template to the TEXINPUTS environment variable"""
        new_texinputs = self.existing_texinputs.split(':')
        new_texinputs.append(os.getcwd())
        new_texinputs.append(self.tikz_dir)
        if self.template_dir:
            new_texinputs.append(self.template_dir)
        new_texinputs.append('.')
        new_texinputs.extend([os.path.abspath(os.path.expanduser(x)) for x in self.arguments.get('include_directory', [])])
        self.environ['TEXINPUTS'] = os.pathsep.join(new_texinputs)
        self.log.debug("$TEXINPUTS is set to '%s'", self.environ['TEXINPUTS'])


    def get_template(self) -> bytes:
        if self.arguments.get('template', None):
            template_filename = self.arguments['template'].name
            self.template_dir = os.path.abspath(os.path.dirname(template_filename))
            self.log.debug("Reading template from %s ", os.path.abspath(template_filename))
            self.arguments['template'].close()
            self.arguments['template'] = open(template_filename, 'rb')
            template_tex: bytes = self.arguments['template'].read()
            try:
                template_tex.index(b'%tikz2pdf-tikz')
            except ValueError:
                self.log.error("Error: Template does not contain '%tikz2pdf-tikz'")
                shutil.rmtree(self.work_dir)
                exit(1)

        else:
            template_tex = rb"""\documentclass{article}
%tikz2pdf+usepackages
%tikz2pdf+usetikzlibraries
\pagestyle{empty}
\usepackage{fontspec}
\usepackage[active,tightpage]{preview}
\PreviewEnvironment[]{tikzpicture}
\PreviewEnvironment[]{tabular}
\begin{document}
%tikz2pdf+fonts
%tikz2pdf+tikz
\end{document}
"""
            self.log.debug("Using default template")
        return template_tex


    def get_tikz(self) -> bytes:
        self.tikz_file.close()
        self.tikz_file = open(self.tikz_filename, 'rb')
        return self.tikz_file.read()


    def compile(self):
        for i in range(self.arguments['number']):
            self.log.info("Compiling (%d/%d) ...", i+1, self.arguments['number'])
            if self.arguments['quiet']:
                p = subprocess.Popen([self.arguments['bin'], '-halt-on-error', 'final.tex'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=self.work_dir, env=self.environ)
            else:
                p = subprocess.Popen([self.arguments['bin'], '-halt-on-error', 'final.tex'], cwd=self.work_dir, env=self.environ)
            return_code = p.wait()
            if return_code:
                self.log.error("Error: %s failed to compile. Last 10 lines of output:", self.arguments['bin'])
                print()
                try:
                    print('\n'.join(p.communicate()[0].split('\n')[-10:]))
                except:
                    pass
                return

        # Copy final PDF
        subprocess.call(['cp', os.path.join(self.work_dir, 'final.pdf'), self.pdf_filename])
        self.log.info("Figure written on %s", self.pdf_filename)


    def get_arguments(self, **command_line_arguments):
        # Custom argument parser
        parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS)
        parser.add_argument('--bin', type=str)
        parser.add_argument('--include-directory', action='append')
        parser.add_argument('--number', type=int)
        parser.add_argument('--output', type=str)
        parser.add_argument('--template', type=argparse.FileType('rb'))
        parser.add_argument('--xelatex', action='store_const', const='xelatex', dest='bin')
        parser.add_argument('--pdflatex', action='store_const', const='pdflatex', dest='bin')
        parser.add_argument('--preview', action='store_true')
        # LaTeX configuration
        parser.add_argument('--use-package', action="append")
        parser.add_argument('--use-tikzlibrary', action="append")
        parser.add_argument('--font', type=str)
        self.parser = parser

        # Files to look for parameters
        configs = [
            os.path.expanduser('~/.tikz2pdf'),
            os.path.join(self.tikz_dir, '.tikz2pdf'),
            os.path.join(os.getcwd(), '.tikz2pdf'),
            self.tikz_filename,
        ]

        arguments = {}
        for config in configs:
            if os.path.isfile(config):
                with open(config, 'rb') as f:
                    arguments.update(self.read_arguments_from_file(f))
            else:
                self.log.debug("File %s not found", config)

        # Command-line arguments have the highest priority
        self.log.debug("Reading parameters from command line")
        arguments.update(command_line_arguments)
        # Default values in case they're not set
        arguments['number'] = arguments.get('number', 1)
        arguments['bin'] = arguments.get('bin', 'xelatex')
        return arguments


    def read_arguments_from_file(self, f):
        self.log.debug("Reading parameters from file %s", os.path.abspath(f.name))
        arguments = []
        for line in f:
            match = re.search(self.argument_pattern, line)
            if match:
                arg, value = map(lambda x: x.strip(), match.groups())
                arguments.append('--%s' % arg.decode())
                if value:
                    if arg == b'template':
                        value = os.path.expanduser(value)
                        if not os.path.isabs(value):
                            value = os.path.join(os.path.dirname(tikz_file.name), value)
                        arguments.append(value)
                    else:
                        vs = [v.decode() for v in value.split()]
                        arguments.extend(vs)
        _vs = vars(self.parser.parse_args(arguments))
        return _vs


    def open_tikz_editor(self):
        self.log.info("Opening TikZ editor...")
        subprocess.Popen([self.environ['EDITOR'], self.tikz_filename], stdout=subprocess.PIPE)


    def open_pdf_viewer(self):
        self.log.info("Opening PDF viewer...")
        if sys.platform == 'linux2':
            subprocess.Popen(["xdg-open", self.pdf_filename], stdout=subprocess.PIPE)
        elif sys.platform == 'darwin':
            subprocess.Popen(["open", self.pdf_filename], stdout=subprocess.PIPE)


def mk_usepackage(package_spec: bytes) -> bytes:
    if b"[" in package_spec:
        package, args = package_spec.split(b"[", 1)
        return br"\usepackage[%s{%s}" % (args, package)  # "]" is part of args
    else:
        return br"\usepackage{%s}" % package_spec


def mk_usetikzlibrary(lib_spec: bytes) -> bytes:
    if b"[" in lib_spec:
        lib, args = lib_spec.split(b"[", 1)
        return br"\usetikzlibrary[%s{%s}" % (args, lib)  # "]" is part of args
    else:
        return br"\usetikzlibrary{%s}" % lib_spec


def mk_font(font_spec: bytes, font_to_paths) -> bytes:
    font_spec: str = font_spec.strip().decode()
    if ":" in font_spec:
        fonts = font_spec.split(":")
        fs = font_to_paths[fonts[0]]
        path = fs[0]  # raises if not found
        result = [r"\fontspec[Path=%s/" % path]
        if len(fonts) > 1 and fonts[1]:
            result.append(r",BoldFont=%s" % fonts[1])
        if len(fonts) > 2 and fonts[2]:
            result.append(r",ItalicFont=%s" % fonts[2])
        if len(fonts) > 3 and fonts[3]:
            result.append(r",BoldItalicFont=%s" % fonts[3])
        result.append(r"]{%s}" % fonts[0])
        return "".join(result).encode()
    else:
        fs = font_to_paths[font_spec]
        path = fs[0]  # raises if not found
        return (r"\fontspec[Path=%s/]{%s}" % (path, font_spec)).encode()


def font_to_paths_dict(base_path: str):
    font_extensions = {".otf", ".ttf", ".pfb", ".ttc", ".otc", ".pk"}
    result = defaultdict(list)
    for root, _, files in os.walk(base_path):
        for file in files:
            if any(file.lower().endswith(ext) for ext in font_extensions):
                result[file].append(root)
    return result


def main():
    global FONT_TO_PATHS
    parser = argparse.ArgumentParser(description="tikz2pdf - compile TikZ to PDF", argument_default=argparse.SUPPRESS)
    parser.add_argument('tikz_files', nargs='*', type=argparse.FileType('rb'), default=sys.stdin, help="TikZ file(s)", metavar="TIKZ")
    # engine
    parser.add_argument('-b', '--bin', type=str, help="binary to use for compiling (default: xelatex)")
    parser.add_argument('-x', '--xelatex', action='store_const', const='xelatex', dest='bin', help="use xelatex as compiler")
    parser.add_argument('-p', '--pdflatex', action='store_const', const='pdflatex', dest='bin', help="use pdflatex as compiler")
    parser.add_argument('--dry-run', action='store_true', default=False, help="dry run, do not execute latex")
    parser.add_argument('-c', '--include-dir', action='append', help="additional directory to add to TEXINPUTS")
    parser.add_argument('-n', '--number', type=int, help="number of iterations to compile (default: 1)", metavar="N")
    # more
    parser.add_argument('-o', '--output', nargs='*', type=str, help="output PDF file or directory (with trailing slash)", metavar="PDF")
    parser.add_argument('-q', '--quiet', action='store_true', default=False, help="suppress compiler output")
    parser.add_argument('-d', '--debug', action='store_true', default=False, help="print debug information")
    # deprecated
    parser.add_argument('-v', '--view', action='store_true', default=False, help="open PDF file in default viewer")
    parser.add_argument('-w', '--watch', action='store_true', default=False, help="recompile when TikZ file or template has changed")
    parser.add_argument('-e', '--edit', action='store_true', default=False, help="open TikZ file in default editor")
    parser.add_argument('-i', '--interactive', action='store_true', default=False, help="start interactive session (same as -evw)")
    # styling
    parser.add_argument('-t', '--template', type=argparse.FileType('rb'), help="LaTeX file to use as template", metavar="TEX")
    parser.add_argument('-U', '--use-package', action="append", help="add PACKAGE with \\usepackage, example 'bla' or 'bla[arg1,arg2]'. You can include a line '%tikz2pdf-use-package=yyy[zzz]' in yout tikz-file, too.", metavar="PACKAGE")
    parser.add_argument('-T', '--use-tikzlibrary', action="append", help="add LIBRARY with \\usetikzlibrary, example 'bla' or 'bla[arg1,arg2]'. You can include a line '%tikz2pdf-use-tikzlibrary=yyy[zzz]' in yout tikz-file, too.", metavar="LIBRARY")
    parser.add_argument('--font-path', default="/usr/share/texmf-dist")
    parser.add_argument('--font', type=str, help="use FONTFILE[:FONTFILE_BOLD:FONTFILE_ITALIC:FONTFILE_BOLDITALIC] as font, eg 'Erewhon-Regular.otf'. The font is searched with 'find / -name FONTFILE'. If you have the choice between .pdb and .otf/.ttf prefer the latter. '*' to print a list.")

    args = vars(parser.parse_args())
    tikz_files = args.pop('tikz_files')
    output = args.pop('output', ['./'])

    if args['interactive']:
        args['edit'] = True
        args['view'] = True
        args['watch'] = True

    if len(output) == 1 and output[0][-1] == os.path.sep:
        d = os.path.abspath(output[0])
        if tikz_files is not sys.stdin:
            pdf_filenames = map(lambda x: os.path.join(d, os.path.splitext(os.path.basename(x.name))[0]) + '.pdf', tikz_files)
        else:
            pdf_filenames = ['out.pdf']
    elif len(output) != len(tikz_files):
        print("Error: Number of output files does not match number of input files. Consider specifying a directory with a trailing slash", file=sys.stderr)
        exit(1)
    else:
        d = os.path.curdir
        pdf_filenames = map(lambda x: os.path.abspath(os.path.join(d, x)), output)

    log_format = "tikz2pdf: %(message)s"
    logging.basicConfig(format=log_format, level=logging.INFO)

    # find all files in args.font_path:
    if True: # make fthis lazy and later. args['font']:
        FONT_TO_PATHS = font_to_paths_dict(args['font_path'])
        if args.get('font') == "*":
            for font, paths in sorted(FONT_TO_PATHS.items()):
                print(f"  {font:20s} : {', '.join(paths)}")
            exit(0)

    for tikz_file, pdf_filename in zip(tikz_files, pdf_filenames):
        TikZ2PDF(tikz_file, pdf_filename, **args)


if __name__ == '__main__':
    exit(main())

